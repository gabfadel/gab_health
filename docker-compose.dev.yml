version: "3.9"

services:
  # --- BANCO DE DADOS -------------------------------------------------------
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - gab_backend

  # --- PGADMIN (interface grÃ¡fica p/ Postgres) ------------------------------
  pgadmin:
    image: dpage/pgadmin4:8
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - gab_backend

  # --- REDIS ---------------------------------------------------------------
  redis:
    image: redis:7-alpine
    networks:
      - gab_backend

  # --- BACKEND DJANGO ------------------------------------------------------
  backend:
    build:
      context: ./backend
    command: >
      sh -c "python manage.py makemigrations users &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
      - .env.local
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - gab_backend                                                                           

  # --- CELERY WORKER -------------------------------------------------------
  worker:
    build:
      context: ./backend                                                                                      
    command: celery -A src.celery worker --loglevel=info
    environment:
      DJANGO_SETTINGS_MODULE: src.settings
    env_file:
      - .env
      - .env.local
    volumes:
      - ./backend:/app
    depends_on:                                                                               
      - db
      - redis
    networks:
      - gab_backend

  # --- FRONTEND (Next/React) ----------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
      - .env.local
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - gab_backend

# ------------------- REDES & VOLUMES ---------------------------------------
networks:
  gab_backend:
    driver: bridge

volumes:
  db_data:
  pgadmin_data:
